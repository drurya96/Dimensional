.TH "Dimension::BaseDimension< NumTuple, DenTuple >" 3 "Version 0.4" "Dimensional" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dimension::BaseDimension< NumTuple, DenTuple > \- A generic \fBDimension\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <BaseDimension\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBaseDimension\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBT\fP > \fBBaseDimension\fP (\fBconst\fP \fBT\fP &\fBdimension\fP)"
.br
.RI "Constructor using existing dimension\&. "
.ti -1c
.RI "\fBBaseDimension\fP (\fBdouble\fP \fBnewValue\fP, \fBNumTuple\fP \fBnewNumList\fP, \fBDenTuple\fP \fBnewDenList\fP)"
.br
.RI "Constructor explicitly given all values\&. "
.ti -1c
.RI "template<\fBtypename\fP \&.\&.\&. NumTupleTypes, \fBtypename\fP \&.\&.\&. DenTupleTypes> \fBdouble\fP \fBGetVal\fP (\fBconst\fP std::tuple< NumTupleTypes\&.\&.\&. > &\fBi_numList\fP, \fBconst\fP std::tuple< DenTupleTypes\&.\&.\&. > &\fBi_denList\fP) \fBconst\fP"
.br
.RI "Return the internal value as a double in terms of the provided units\&. "
.ti -1c
.RI "\fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBoperator+=\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP)"
.br
.RI "+= operator overload for another \fBDimension\fP "
.ti -1c
.RI "\fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBoperator\-=\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP)"
.br
.RI "-= operator overload for another \fBDimension\fP "
.ti -1c
.RI "\fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBoperator*=\fP (\fBdouble\fP \fBrhs\fP)"
.br
.RI "*= operator overload for a scalar "
.ti -1c
.RI "\fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBoperator/=\fP (\fBdouble\fP \fBrhs\fP)"
.br
.RI "/= operator overload for a scalar "
.ti -1c
.RI "\fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBoperator*=\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP)=\fBdelete\fP"
.br
.ti -1c
.RI "\fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBoperator/=\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP)=\fBdelete\fP"
.br
.ti -1c
.RI "\fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBoperator+=\fP (\fBdouble\fP \fBrhs\fP)=\fBdelete\fP"
.br
.ti -1c
.RI "\fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBoperator\-=\fP (\fBdouble\fP \fBrhs\fP)=\fBdelete\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator>=\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator<=\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBrhs\fP) \fBconst\fP"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBNumTuple\fP \fBnumList\fP"
.br
.RI "Tuple of units corresponding to the \fBDimension\fP numerator\&. "
.ti -1c
.RI "\fBDenTuple\fP \fBdenList\fP"
.br
.RI "Tuple of units corresponding to the \fBDimension\fP denominator\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<\fBtypename\fP \fBNumTuple1\fP , \fBtypename\fP \fBDenTuple1\fP , \fBtypename\fP \fBNumTuple2\fP , \fBtypename\fP \fBDenTuple2\fP > \fBauto\fP \fBoperator/\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple1\fP, \fBDenTuple1\fP > &\fBobj1\fP, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple2\fP, \fBDenTuple2\fP > &\fBobj2\fP)"
.br
.RI "Division operator for two Dimensions\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBNumTuple1\fP , \fBtypename\fP \fBDenTuple1\fP , \fBtypename\fP \fBNumTuple2\fP , \fBtypename\fP \fBDenTuple2\fP > \fBauto\fP \fBoperator*\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple1\fP, \fBDenTuple1\fP > &\fBobj1\fP, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple2\fP, \fBDenTuple2\fP > &\fBobj2\fP)"
.br
.RI "Multiplication operator for two Dimensions\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator*\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBobj\fP, \fBdouble\fP \fBscalar\fP)"
.br
.RI "Multiplication operator for a \fBDimension\fP and scalar\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator*\fP (\fBdouble\fP \fBscalar\fP, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBobj\fP)"
.br
.RI "Multiplication operator for a scalar and \fBDimension\fP\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator/\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBobj\fP, \fBdouble\fP \fBscalar\fP)"
.br
.RI "Division operator for a \fBDimension\fP and scalar\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBauto\fP \fBoperator/\fP (\fBdouble\fP \fBscalar\fP, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBobj\fP) \-> \fBBaseDimension\fP< \fBDenTuple\fP, \fBNumTuple\fP >"
.br
.RI "Division operator for a scalar and \fBDimension\fP\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator+\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBobj1\fP, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBobj2\fP)"
.br
.RI "Addition operator for two Dimensions\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator\-\fP (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBobj1\fP, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > &\fBobj2\fP)"
.br
.RI "Subtraction operator for two Dimensions\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<\fBtypename\fP \fBNumTuple\fP, \fBtypename\fP \fBDenTuple\fP>
.br
class Dimension::BaseDimension< NumTuple, DenTuple >"A generic \fBDimension\fP class\&. 

This class represents a \fBDimension\fP, such as \fBLength\fP, \fBTime\fP, \fBSpeed\fP, etc\&. Its templates are used to set the dimensions of the numerator and denominator, respectively\&. For example, a \fBBaseDimension\fP may be templated on a tuple<LengthUnit> and a tuple<TimeUnit>\&. This would still be a \fBBaseDimension\fP, but can be treated as 'Speed'\&. This library may be used with \fBBaseDimension\fP alone, but Dimensions may also be derived from \fBBaseDimension\fP for more readible code, for example the \fBLength\fP, \fBTime\fP, and \fBSpeed\fP classes provided\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fINumTuple\fP A tuple of BaseUnits describing the dimension's numerator\&. 
.br
\fIDenTuple\fP A tuple of BaseUnits describing the dimension's denominator\&. 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >::BaseDimension ()\fR [inline]\fP"

.PP
Default constructor\&. 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \fBT\fP > \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >::BaseDimension (\fBconst\fP \fBT\fP & dimension)\fR [inline]\fP, \fR [explicit]\fP"

.PP
Constructor using existing dimension\&. This constructor creates a new object matching an existing dimension 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Type of given \fBDimension\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIdimension\fP A \fBDimension\fP object to copy 
.RE
.PP
\fBReturns\fP
.RS 4
A new \fBDimension\fP object of type T 
.RE
.PP

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >::BaseDimension (\fBdouble\fP newValue, \fBNumTuple\fP newNumList, \fBDenTuple\fP newDenList)\fR [inline]\fP"

.PP
Constructor explicitly given all values\&. A constructor given all needed information\&. This constructor should typically be used for creating new objects\&. 
.PP
\fBParameters\fP
.RS 4
\fInewValue\fP The value to set 
.br
\fInewNumList\fP A tuple of BaseUnits to set as numerators 
.br
\fInewDenList\fP A tuple of BaseUnits to set as denominators 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \&.\&.\&. NumTupleTypes, \fBtypename\fP \&.\&.\&. DenTupleTypes> \fBdouble\fP \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >::GetVal (\fBconst\fP std::tuple< NumTupleTypes\&.\&.\&. > & i_numList, \fBconst\fP std::tuple< DenTupleTypes\&.\&.\&. > & i_denList) const\fR [inline]\fP"

.PP
Return the internal value as a double in terms of the provided units\&. Return the internal value after converting to the provided units\&. 
.PP
\fBParameters\fP
.RS 4
\fIi_numList\fP tuple of \fBBaseUnit\fP pointers to convert to for the numerator 
.br
\fIi_denList\fP tuple of \fBBaseUnit\fP pointers to convert to for the denominator 
.RE
.PP
\fBReturns\fP
.RS 4
A double representing the value in terms of the given units 
.RE
.PP

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBbool\fP \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator!\fP= (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs) const\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP*= (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs)\fR [delete]\fP"

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP*= (\fBdouble\fP rhs)\fR [inline]\fP"

.PP
*= operator overload for a scalar 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP+= (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs)\fR [inline]\fP"

.PP
+= operator overload for another \fBDimension\fP 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP+= (\fBdouble\fP rhs)\fR [delete]\fP"

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP\-= (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs)\fR [inline]\fP"

.PP
-= operator overload for another \fBDimension\fP 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP\-= (\fBdouble\fP rhs)\fR [delete]\fP"

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP/= (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs)\fR [delete]\fP"

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP/= (\fBdouble\fP rhs)\fR [inline]\fP"

.PP
/= operator overload for a scalar 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBbool\fP \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP< (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs) const\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBbool\fP \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP<= (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs) const\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBbool\fP \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP== (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs) const\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBbool\fP \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP> (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs) const\fR [inline]\fP"

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBbool\fP \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >\fB::operator\fP>= (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & rhs) const\fR [inline]\fP"

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator\fP* (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & obj, \fBdouble\fP scalar)\fR [friend]\fP"

.PP
Multiplication operator for a \fBDimension\fP and scalar\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fINumTuple\fP Tuple of units in the numerator 
.br
\fIDenTuple\fP Tuple of units in the denominator 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj\fP The \fBBaseDimension\fP object 
.br
\fIscalar\fP The scalar value as a double 
.RE
.PP
\fBReturns\fP
.RS 4
A \fBBaseDimension\fP object of type matching obj, with value multiplied by scalar 
.RE
.PP

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \fBNumTuple1\fP , \fBtypename\fP \fBDenTuple1\fP , \fBtypename\fP \fBNumTuple2\fP , \fBtypename\fP \fBDenTuple2\fP > \fBauto\fP \fBoperator\fP* (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple1\fP, \fBDenTuple1\fP > & obj1, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple2\fP, \fBDenTuple2\fP > & obj2)\fR [friend]\fP"

.PP
Multiplication operator for two Dimensions\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fINumTuple1\fP Tuple of numerator units of obj1 
.br
\fIDenTuple1\fP Tuple of denominator units of obj1 
.br
\fINumTuple2\fP Tuple of numerator units of obj2 
.br
\fIDenTuple2\fP Tuple of denominator units of obj2 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj1\fP The first \fBBaseDimension\fP object 
.br
\fIobj2\fP The second \fBBaseDimension\fP object 
.RE
.PP
\fBReturns\fP
.RS 4
A base dimension object templated on the types of both input objects, then simplified\&. 
.RE
.PP

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator\fP* (\fBdouble\fP scalar, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & obj)\fR [friend]\fP"

.PP
Multiplication operator for a scalar and \fBDimension\fP\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fINumTuple\fP Tuple of units in the numerator 
.br
\fIDenTuple\fP Tuple of units in the denominator 
.RE
.PP
\fBParameters\fP
.RS 4
\fIscalar\fP The scalar value as a double 
.br
\fIobj\fP The \fBBaseDimension\fP object 
.RE
.PP
\fBReturns\fP
.RS 4
A \fBBaseDimension\fP object of type matching obj, with value multiplied by scalar 
.RE
.PP

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator\fP+ (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & obj1, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & obj2)\fR [friend]\fP"

.PP
Addition operator for two Dimensions\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fINumTuple\fP Tuple of units in the numerator 
.br
\fIDenTuple\fP Tuple of units in the denominator 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj1\fP The first \fBBaseDimension\fP object 
.br
\fIobj2\fP The second \fBBaseDimension\fP object 
.RE
.PP
\fBReturns\fP
.RS 4
A base dimension object of type matching the inputs\&. The value is the values of obj1 and obj2 added, after converting obj2 to the same units as obj1 
.RE
.PP

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator\fP\- (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & obj1, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & obj2)\fR [friend]\fP"

.PP
Subtraction operator for two Dimensions\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fINumTuple\fP Tuple of units in the numerator 
.br
\fIDenTuple\fP Tuple of units in the denominator 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj1\fP The first \fBBaseDimension\fP object 
.br
\fIobj2\fP The second \fBBaseDimension\fP object 
.RE
.PP
\fBReturns\fP
.RS 4
A base dimension object of type matching the inputs\&. The value is the difference of values of obj1 and obj2, after converting obj2 to the same units as obj1 
.RE
.PP

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > \fBoperator\fP/ (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & obj, \fBdouble\fP scalar)\fR [friend]\fP"

.PP
Division operator for a \fBDimension\fP and scalar\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fINumTuple\fP Tuple of units in the numerator 
.br
\fIDenTuple\fP Tuple of units in the denominator 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj\fP The \fBBaseDimension\fP object 
.br
\fIscalar\fP The scalar value as a double 
.RE
.PP
\fBReturns\fP
.RS 4
A \fBBaseDimension\fP object of type matching obj, with value divided by scalar 
.RE
.PP

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \fBNumTuple1\fP , \fBtypename\fP \fBDenTuple1\fP , \fBtypename\fP \fBNumTuple2\fP , \fBtypename\fP \fBDenTuple2\fP > \fBauto\fP \fBoperator\fP/ (\fBconst\fP \fBBaseDimension\fP< \fBNumTuple1\fP, \fBDenTuple1\fP > & obj1, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple2\fP, \fBDenTuple2\fP > & obj2)\fR [friend]\fP"

.PP
Division operator for two Dimensions\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fINumTuple1\fP Tuple of numerator units of obj1 
.br
\fIDenTuple1\fP Tuple of denominator units of obj1 
.br
\fINumTuple2\fP Tuple of numerator units of obj2 
.br
\fIDenTuple2\fP Tuple of denominator units of obj2 
.RE
.PP
\fBParameters\fP
.RS 4
\fIobj1\fP The numerator \fBBaseDimension\fP object 
.br
\fIobj2\fP The denominator \fBBaseDimension\fP object 
.RE
.PP
\fBReturns\fP
.RS 4
A base dimension object templated on the numerator types and the denominator types, then simplified\&. 
.RE
.PP

.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBauto\fP \fBoperator\fP/ (\fBdouble\fP scalar, \fBconst\fP \fBBaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP > & obj) \-> \fBBaseDimension\fP<\fBDenTuple\fP, \fBNumTuple\fP>\fR [friend]\fP"

.PP
Division operator for a scalar and \fBDimension\fP\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fINumTuple\fP Tuple of units in the numerator 
.br
\fIDenTuple\fP Tuple of units in the denominator 
.RE
.PP
\fBParameters\fP
.RS 4
\fIscalar\fP The scalar value as a double 
.br
\fIobj\fP The \fBBaseDimension\fP object 
.RE
.PP
\fBReturns\fP
.RS 4
A \fBBaseDimension\fP object with Unit parameters inverted relative to obj, and with scalar divided by obj value as the new value 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBDenTuple\fP \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >::denList"

.PP
Tuple of units corresponding to the \fBDimension\fP denominator\&. 
.SS "template<\fBtypename\fP \fBNumTuple\fP , \fBtypename\fP \fBDenTuple\fP > \fBNumTuple\fP \fBDimension::BaseDimension\fP< \fBNumTuple\fP, \fBDenTuple\fP >::numList"

.PP
Tuple of units corresponding to the \fBDimension\fP numerator\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Dimensional from the source code\&.
