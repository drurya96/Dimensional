.TH "DimensionUtilities.h" 3 "Version 0.4" "Dimensional" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DimensionUtilities.h
.SH SYNOPSIS
.br
.PP
\fR#include <type_traits>\fP
.br
\fR#include <tuple>\fP
.br
\fR#include <functional>\fP
.br
\fR#include <utility>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBDimension::remove_pointer< T * >\fP"
.br
.ti -1c
.RI "struct \fBDimension::RemoveOneInstance< T, std::tuple<> >\fP"
.br
.ti -1c
.RI "struct \fBDimension::RemoveOneInstance< T, std::tuple< Head, Tail\&.\&.\&. > >\fP"
.br
.ti -1c
.RI "struct \fBDimension::has_type< T, std::tuple< Us\&.\&.\&. > >\fP"
.br
.ti -1c
.RI "struct \fBDimension::tuple_diff< std::tuple<>, std::tuple< subtrahendTypes\&.\&.\&. > >\fP"
.br
.ti -1c
.RI "struct \fBDimension::tuple_diff< std::tuple< restMinuendTypes\&.\&.\&. >, std::tuple<> >\fP"
.br
.ti -1c
.RI "struct \fBDimension::tuple_diff< std::tuple< T, restMinuendTypes\&.\&.\&. >, std::tuple< subtrahendTypes\&.\&.\&. > >\fP"
.br
.ti -1c
.RI "struct \fBDimension::ConvertFunctor< isNumerator >\fP"
.br
.RI "Simple stuct exposing the ConvertValue callable based on the isNumerator flag\&. "
.ti -1c
.RI "struct \fBDimension::AddIfUnique< T, Ts >\fP"
.br
.ti -1c
.RI "struct \fBDimension::MakeCountersImpl< std::tuple< T, Ts\&.\&.\&. >, std::tuple< UniqueTypes\&.\&.\&. > >\fP"
.br
.ti -1c
.RI "struct \fBDimension::MakeCountersImpl< std::tuple<>, std::tuple< UniqueTypes\&.\&.\&. > >\fP"
.br
.ti -1c
.RI "struct \fBDimension::MakeCounters< Tuple >\fP"
.br
.ti -1c
.RI "struct \fBDimension::AllUnitSimplifier< NumTuple, DenTuple >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBDimension\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "template<typename\&.\&.\&. Ts> \fBusing\fP \fBDimension::tuple_cat_t\fP = \fBdecltype\fP(std::tuple_cat(std::declval<\fBTs\fP>()\&.\&.\&.))"
.br
.RI "Convenience alias for retrieving the type of a tuple of types\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBTuple\fP > \fBusing\fP \fBDimension::MakeCounters_t\fP = \fBtypename\fP \fBMakeCounters\fP<\fBTuple\fP>::type"
.br
.RI "Alias to directly access the counter tuple of \fBMakeCounters\fP\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "std::tuple \fBDimension::UnitList\fP ()"
.br
.RI "Function to convert given units to a tuple of pointers\&. "
.ti -1c
.RI "template<\fBtypename\fP \&.\&.\&. Ts> \fBauto\fP \fBDimension::UnitList\fP (\fBTs\fP &\&.\&.\&. \fBts\fP) \-> std::tuple< \fBTs\fP *\&.\&.\&. >"
.br
.RI "Function to convert given units to a tuple of pointers\&. "
.ti -1c
.RI "template<\fBsize_t\fP I = 0, typename\&.\&.\&. Ts, \fBtypename\fP \fBFunctor\fP > std::enable_if< \fBI\fP==sizeof\&.\&.\&.(\fBTs\fP), \fBvoid\fP >::type \fBDimension::GetConvertedValue\fP (\fBconst\fP std::tuple< Ts\&.\&.\&. > &\fBtup\fP, \fBconst\fP std::tuple< Ts\&.\&.\&. > &\fBtup2\fP, \fBdouble\fP &value, \fBFunctor\fP \fBfunc\fP)"
.br
.RI "Update the input value, using the input callable, based on the given units\&. "
.ti -1c
.RI "template<\fBsize_t\fP I = 0, typename\&.\&.\&. Ts, \fBtypename\fP \fBFunctor\fP > std::enable_if<(\fBI\fP< sizeof\&.\&.\&.(\fBTs\fP)), \fBvoid\fP >::type \fBDimension::GetConvertedValue\fP (\fBconst\fP std::tuple< Ts\&.\&.\&. > &\fBfromTup\fP, \fBconst\fP std::tuple< Ts\&.\&.\&. > &\fBtoTup\fP, \fBdouble\fP &value, \fBFunctor\fP \fBfunc\fP)"
.br
.RI "Update the input value, using the input callable, based on the given units\&. "
.ti -1c
.RI "template<\fBsize_t\fP I = 0, typename\&.\&.\&. Ts, \fBtypename\fP \fBUpdateType\fP > std::enable_if< \fBI\fP==sizeof\&.\&.\&.(\fBTs\fP), \fBvoid\fP >::type \fBDimension::UpdateResultTuple\fP (std::tuple< Ts\&.\&.\&. > &\fBtup\fP, \fBUpdateType\fP \fBupdate\fP)"
.br
.RI "Update the given tuple at position I to the given value\&. "
.ti -1c
.RI "template<\fBsize_t\fP I = 0, typename\&.\&.\&. Ts, \fBtypename\fP \fBUpdateType\fP > std::enable_if<(\fBI\fP< sizeof\&.\&.\&.(\fBTs\fP)), \fBvoid\fP >::type \fBDimension::UpdateResultTuple\fP (std::tuple< Ts\&.\&.\&. > &\fBtup\fP, \fBUpdateType\fP \fBupdate\fP)"
.br
.RI "Update the given tuple at position I to the given value\&. "
.ti -1c
.RI "template<\fBbool\fP convertValue, \fBsize_t\fP I = 0, typename\&.\&.\&. Ts, \fBtypename\fP \fBFromUnit\fP > std::enable_if< \fBI\fP==sizeof\&.\&.\&.(\fBTs\fP), \fBbool\fP >::type \fBDimension::CancelUnit\fP (\fBconst\fP std::tuple< Ts\&.\&.\&. > &\fBtoUnits\fP, \fBconst\fP \fBFromUnit\fP &\fBfromUnit\fP, \fBdouble\fP &value, \fBint\fP \fBcounter\fP, \fBint\fP \fBcurrentCount\fP=0)"
.br
.RI "Update the given value using the conversion function from fromUnit to index I of tup\&. "
.ti -1c
.RI "template<\fBbool\fP convertValue, \fBsize_t\fP I = 0, typename\&.\&.\&. Ts, \fBtypename\fP \fBFromUnit\fP > std::enable_if<(\fBI\fP< sizeof\&.\&.\&.(\fBTs\fP)), \fBbool\fP >::type \fBDimension::CancelUnit\fP (\fBconst\fP std::tuple< Ts\&.\&.\&. > &\fBtoUnits\fP, \fBconst\fP \fBFromUnit\fP &\fBfromUnit\fP, \fBdouble\fP &value, \fBint\fP \fBcounter\fP, \fBint\fP \fBcurrentCount\fP=0)"
.br
.RI "Update the given value using the conversion function from fromUnit to index I of tup\&. "
.ti -1c
.RI "template<\fBbool\fP convertValue, \fBsize_t\fP I = 0, typename\&.\&.\&. PrimaryTuple, \fBtypename\fP \&.\&.\&. SecondaryTuple, \fBtypename\fP \&.\&.\&. OutTuple, \fBtypename\fP \&.\&.\&. CountArgs> std::enable_if< \fBI\fP==sizeof\&.\&.\&.(\fBPrimaryTuple\fP), \fBvoid\fP >::type \fBDimension::CancelUnits\fP (\fBconst\fP std::tuple< PrimaryTuple\&.\&.\&. > &\fBprimaryTuple\fP, \fBconst\fP std::tuple< SecondaryTuple\&.\&.\&. > &\fBsecondaryTuple\fP, std::tuple< OutTuple\&.\&.\&. > &\fBoutTuple\fP, std::tuple< CountArgs\&.\&.\&. > &\fBcounterTup\fP, \fBdouble\fP &value)"
.br
.RI "Update the given value, counter tuple, and output tuple by 'cancelling' units\&. "
.ti -1c
.RI "template<\fBbool\fP convertValue, \fBsize_t\fP I = 0, typename\&.\&.\&. PrimaryTuple, \fBtypename\fP \&.\&.\&. SecondaryTuple, \fBtypename\fP \&.\&.\&. OutTuple, \fBtypename\fP \&.\&.\&. CountArgs> std::enable_if<(\fBI\fP< sizeof\&.\&.\&.(\fBPrimaryTuple\fP)), \fBvoid\fP >::type \fBDimension::CancelUnits\fP (\fBconst\fP std::tuple< PrimaryTuple\&.\&.\&. > &\fBprimaryTuple\fP, \fBconst\fP std::tuple< SecondaryTuple\&.\&.\&. > &\fBsecondaryTuple\fP, std::tuple< OutTuple\&.\&.\&. > &\fBoutTuple\fP, std::tuple< CountArgs\&.\&.\&. > &\fBcounterTup\fP, \fBdouble\fP &value)"
.br
.RI "Update the given value, counter tuple, and output tuple by 'cancelling' units\&. "
.ti -1c
.RI "template<\fBtypename\fP \fBOrigNumTuple\fP , \fBtypename\fP \fBOrigDenTuple\fP > \fBauto\fP \fBDimension::SimplifyBaseDimension\fP (\fBconst\fP \fBBaseDimension\fP< \fBOrigNumTuple\fP, \fBOrigDenTuple\fP > &\fBobj\fP)"
.br
.RI "Function to construct a simplified \fBBaseDimension\fP from a given \fBBaseDimension\fP\&. "
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Dimensional from the source code\&.
