#ifndef STATIC_DIMENSION_{{ dimension_name.upper() }}_IMPL_H
#define STATIC_DIMENSION_{{ dimension_name.upper() }}_IMPL_H

{{ includes }}

namespace Dimension
{
   /// @brief Concept for a named {{ dimension_name }} unit.
   /// @tparam Named{{ dimension_name }} The type to be checked as a named {{ dimension_name }} unit.
   template<typename Named{{ dimension_name }}>
   concept IsNamed{{ dimension_name }}Unit = requires {
      typename Named{{ dimension_name }}::NumTuple;
      typename Named{{ dimension_name }}::DenTuple;
   };

   /// @brief Concept for a {{ dimension_name }} dimension.
   /// @details Checks if the provided types satisfy the {{ dimension_name }} dimension requirements.
{%- for item in numerator_template_list %}
   /// @tparam {{ item }} Numerator {{ item }} type
{%- endfor %}
{%- for item in denominator_template_list %}
   /// @tparam {{ item }} Denominator {{ item }} type
{%- endfor %}
   template<{{ numerator_template_types }} {%- if numerator_template_types and denominator_template_types -%},{%- endif -%} {{ denominator_template_types }}>
   concept Is{{ dimension_name }}Units = 
      {{ dimension_checks }};

   /// @brief Concept for a {{ dimension_name }} type.
   /// @details Ensures that the type meets {{ dimension_name }} type requirements, based on numerator and denominator types.
   /// @tparam T The type to validate.
   template<typename T>
   concept Is{{ dimension_name }}Type = requires {
      typename T::NumTuple;
      typename T::DenTuple;
   } && std::tuple_size_v<typename T::NumTuple> == {{ num_size }} && std::tuple_size_v<typename T::DenTuple> == {{ den_size }} &&
   Is{{ dimension_name }}Units<{{ extracted_numerator_types }} {%- if extracted_numerator_types and extracted_denominator_types -%},{%- endif -%} {{ extracted_denominator_types }}>;

   /// @brief Retrieves the value of a {{ dimension_name }} object.
   /// @details Provides access to the underlying value represented by a {{ dimension_name }} object.
{%- for item in numerator_template_list %}
   /// @tparam {{ item }} Numerator {{ item }} type
{%- endfor %}
{%- for item in denominator_template_list %}
   /// @tparam {{ item }} Denominator {{ item }} type
{%- endfor %}
   /// @tparam {{ dimension_name }}Type The type of the object being accessed.
   /// @param obj The {{ dimension_name }} object.
   /// @return The underlying value as `PrecisionType`
   template<{{ numerator_template_types }} {%- if numerator_template_types and denominator_template_types -%},{%- endif -%} {{ denominator_template_types }}, typename {{ dimension_name }}Type>
   requires Is{{ dimension_name }}Units<{{ numerator_types }} {%- if numerator_types and denominator_types -%},{%- endif -%} {{ denominator_types }}> && Is{{ dimension_name }}Type<{{ dimension_name }}Type>
   constexpr PrecisionType get{{ dimension_name }}(const {{ dimension_name }}Type& obj)
   {
      return obj.template GetVal<std::tuple<{{ numerator_types }}>, std::tuple<{{ denominator_types }}>>();
   }

   /// @brief Retrieves the value of a named {{ dimension_name }} object.
   /// @details Provides access to the value represented by a named {{ dimension_name }} object.
   /// @tparam Named{{ dimension_name }} The named unit type.
   /// @tparam {{ dimension_name }}Type The type of the object being accessed.
   /// @param obj The {{ dimension_name }} object.
   /// @return The underlying value as `PrecisionType`.
   template<typename Named{{ dimension_name }}, typename {{ dimension_name }}Type>
   requires IsNamed{{ dimension_name }}Unit<Named{{ dimension_name }}> && Is{{ dimension_name }}Type<{{ dimension_name }}Type>
   constexpr PrecisionType get{{ dimension_name }}(const {{ dimension_name }}Type& obj)
   {
      return obj.template GetVal<typename Named{{ dimension_name }}::NumTuple, typename Named{{ dimension_name }}::DenTuple>();
   }

   template<typename... Ts>
   class {{ dimension_name }};

   /// @brief Represents a {{ dimension_name }}.
   /// @details Defines operations and data storage for {{ dimension_name }} dimensions.
{%- for item in numerator_template_list %}
   /// @tparam {{ item }} Numerator {{ item }} type
{%- endfor %}
{%- for item in denominator_template_list %}
   /// @tparam {{ item }} Denominator {{ item }} type
{%- endfor %}
   template<{{ numerator_template_types }} {%- if numerator_template_types and denominator_template_types -%},{%- endif -%} {{ denominator_template_types }}>
   requires Is{{ dimension_name }}Units<{{ numerator_types }} {%- if numerator_types and denominator_types -%},{%- endif -%} {{ denominator_types }}>
   class {{ dimension_name }}<{{ numerator_types }} {%- if numerator_types and denominator_types -%},{%- endif -%} {{ denominator_types }}> : public BaseDimension<std::tuple<{{ numerator_types }}>, std::tuple<{{ denominator_types }}>>
   {
   public:
      using Base = BaseDimension<std::tuple<{{ numerator_types }}>, std::tuple<{{ denominator_types }}>>;
      using Base::Base;

      /// @brief Constructs a {{ dimension_name }} object with a value.
      /// @param val The value of the {{ dimension_name }}.
      constexpr {{ dimension_name }}(PrecisionType val) : Base(val) {}

      /// @brief Constructs a {{ dimension_name }} object from a named unit.
      /// @tparam Named{{ dimension_name }} The named unit type.
      /// @param base The base unit object.
      template<typename Named{{ dimension_name }}>
      requires IsNamed{{ dimension_name }}Unit<Named{{ dimension_name }}>
      constexpr {{ dimension_name }}(const Named{{ dimension_name }}& base) : Base(base) {}

      /// @brief Deprecated function to get the value of {{ dimension_name }}.
      /// @details Prefer using the free function `get{{ dimension_name }}()` instead.
      /// @return The value of the {{ dimension_name }}.
      template<{{ numerator_template_typesT }} {%- if numerator_template_typesT and denominator_template_typesT -%},{%- endif -%} {{ denominator_template_typesT }}>
      requires Is{{ dimension_name }}Units<{{ numerator_typesT }} {%- if numerator_typesT and denominator_typesT -%},{%- endif -%} {{ denominator_typesT }}>
      [[deprecated("Use the free function get{{ dimension_name }}() instead.")]]
      double Get{{ dimension_name }}() const
      {
         return get{{ dimension_name }}<{{ numerator_typesT }} {%- if numerator_typesT and denominator_typesT -%},{%- endif -%} {{ denominator_typesT }}>(*this);
      }

      /// @brief Deprecated function to get the value of {{ dimension_name }}.
      /// @details Prefer using the free function `get{{ dimension_name }}()` instead.
      /// @return The value of the {{ dimension_name }}.
      template<typename Named{{ dimension_name }}>
      requires IsNamed{{ dimension_name }}Unit<Named{{ dimension_name }}>
      [[deprecated("Use the free function get{{ dimension_name }}() instead.")]]
      double Get{{ dimension_name }}() const
      {
         return get{{ dimension_name }}<Named{{ dimension_name }}>(*this);
      }
   };

   /// @brief Represents a named {{ dimension_name }} class.
   /// @details Provides functionality for named {{ dimension_name }} units.
   /// @tparam Named{{ dimension_name }} The named unit type.
   template<typename Named{{ dimension_name }}>
   requires IsNamed{{ dimension_name }}Unit<Named{{ dimension_name }}>
   class {{ dimension_name }}<Named{{ dimension_name }}> : public BaseDimension<typename Named{{ dimension_name }}::NumTuple, typename Named{{ dimension_name }}::DenTuple>
   {
   public:
      using Base = BaseDimension<typename Named{{ dimension_name }}::NumTuple, typename Named{{ dimension_name }}::DenTuple>;
      using Base::Base;

      /// @brief Constructs a {{ dimension_name }} object with a value.
      /// @param val The value of the {{ dimension_name }}.
      constexpr {{ dimension_name }}(PrecisionType val) : Base(val) {}

      /// @brief Constructs a {{ dimension_name }} object from another {{ dimension_name }} object.
      /// @tparam Other{{ dimension_name }} The other {{ dimension_name }} type.
      /// @param base The base {{ dimension_name }} object.
      template<typename Other{{ dimension_name }}>
      requires Is{{ dimension_name }}Type<Other{{ dimension_name }}>
      constexpr {{ dimension_name }}(const Other{{ dimension_name }}& base)
         : Base(base.template GetVal<typename Named{{ dimension_name }}::NumTuple, typename Named{{ dimension_name }}::DenTuple>()) {}

      /// @brief Deprecated function to get the value of {{ dimension_name }}.
      /// @details Prefer using the free function `get{{ dimension_name }}()` instead.
      /// @return The value of the {{ dimension_name }}.
      template<{{ numerator_template_typesT }} {%- if numerator_template_typesT and denominator_template_typesT -%},{%- endif -%} {{ denominator_template_typesT }}>
      requires Is{{ dimension_name }}Units<{{ numerator_typesT }} {%- if numerator_typesT and denominator_typesT -%},{%- endif -%} {{ denominator_typesT }}>
      [[deprecated("Use the free function get{{ dimension_name }}() instead.")]]
      double Get{{ dimension_name }}() const
      {
         return get{{ dimension_name }}<{{ numerator_typesT }} {%- if numerator_typesT and denominator_typesT -%},{%- endif -%} {{ denominator_typesT }}>(*this);
      }

      /// @brief Deprecated function to get the value of {{ dimension_name }}.
      /// @details Prefer using the free function `get{{ dimension_name }}()` instead.
      /// @return The value of the {{ dimension_name }}.
      template<typename Named{{ dimension_name }}Unit>
      requires IsNamed{{ dimension_name }}Unit<Named{{ dimension_name }}Unit>
      [[deprecated("Use the free function get{{ dimension_name }}() instead.")]]
      double Get{{ dimension_name }}() const
      {
         return get{{ dimension_name }}<Named{{ dimension_name }}Unit>(*this);
      }         
   };

   /// @brief Template deduction guide for {{ dimension_name }}.
{%- for item in numerator_template_list %}
   /// @tparam {{ item }} Numerator {{ item }} type
{%- endfor %}
{%- for item in denominator_template_list %}
   /// @tparam {{ item }} Denominator {{ item }} type
{%- endfor %}
   template<{{ numerator_template_types }} {%- if numerator_template_types and denominator_template_types -%},{%- endif -%} {{ denominator_template_types }}>
   requires Is{{ dimension_name }}Units<{{ numerator_types }} {%- if numerator_types and denominator_types -%},{%- endif -%} {{ denominator_types }}>
   {{ dimension_name }}({{ numerator_types }} {%- if numerator_types and denominator_types -%},{%- endif -%} {{ denominator_types }}) -> {{ dimension_name }}<{{ numerator_types }} {%- if numerator_types and denominator_types -%},{%- endif -%} {{ denominator_types }}>;

   /// @brief Template deduction guide for {{ dimension_name }}.
{%- for item in numerator_template_list %}
   /// @tparam {{ item }} Numerator {{ item }} type
{%- endfor %}
{%- for item in denominator_template_list %}
   /// @tparam {{ item }} Denominator {{ item }} type
{%- endfor %}
   template<typename Named{{ dimension_name }}>
   requires IsNamed{{ dimension_name }}Unit<Named{{ dimension_name }}>
   {{ dimension_name }}(Named{{ dimension_name }}) -> {{ dimension_name }}<Named{{ dimension_name }}>;

   /// @brief Template deduction guide for {{ dimension_name }}.
{%- for item in numerator_template_list %}
   /// @tparam {{ item }} Numerator {{ item }} type
{%- endfor %}
{%- for item in denominator_template_list %}
   /// @tparam {{ item }} Denominator {{ item }} type
{%- endfor %}
   template<{{ numerator_template_types }} {%- if numerator_template_types and denominator_template_types -%},{%- endif -%} {{ denominator_template_types }}>
   requires Is{{ dimension_name }}Units<{{ numerator_types }} {%- if numerator_types and denominator_types -%},{%- endif -%} {{ denominator_types }}>
   {{ dimension_name }}(BaseDimension<std::tuple<{{ numerator_types }}>, std::tuple<{{ denominator_types }}>>) -> {{ dimension_name }}<{{ numerator_types }} {%- if numerator_types and denominator_types -%},{%- endif -%} {{ denominator_types }}>;

}

#endif // STATIC_DIMENSION_{{ dimension_name.upper() }}_IMPL_H