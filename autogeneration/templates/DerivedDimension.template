#ifndef STATIC_DIMENSION_{{ dim.name.upper() }}_IMPL_H
#define STATIC_DIMENSION_{{ dim.name.upper() }}_IMPL_H

#include "../../base_dimension.h"
{% for de in dim.definition %}
#include "../../dimensions/fundamental/{{ de.dim }}_dimension.h"
{% endfor %}

{% set dim_num = dim.definition | length %}
{% set t_items = [] %}
{% for i in range(dim_num) %}
   {% set _ = t_items.append('T' ~ i) %}
{% endfor %}
{% set t_list = t_items | join(', ') %}
{% set perms = constraint_permutations(dim.definition) %}

namespace dimension
{

   template<
      {% for t in t_items %}
         typename {{ t }}{{ "," if not loop.last }}
      {% endfor %}
   >
   concept are_{{ dim.name }}_units =
      {% for perm in perms %}
         (
         {% for i in range(dim_num) %}
               {{ perm[i] }}<{{ t_items[i] }}>{{ " && " if not loop.last }}
         {% endfor %}
         ){{ " ||" if not loop.last }}
      {% endfor %}
   ;

   /// @brief Concept to verify a type can serve as a named {{ dim.name }} unit
   template<typename T>
   concept IsNamed{{ dim.name }}Unit = requires {
      typename T::units;
      requires 
         std::tuple_size_v<typename T::units> == {{ dim.definition | length }} &&
         {% for i in range(dim.definition | length) %}
         is_{{dim.definition[i].dim}}_unit<typename std::tuple_element_t<{{ i }}, typename T::units>::unit>{{ " &&" if not loop.last else ";"}}
         {% endfor %}
      requires !std::is_base_of_v<FundamentalUnitTag, T>;
   };

   /// @brief Concept to verify a dimension can be treated as a {{ dim.name }} type
   template<typename T>
   concept is_{{ dim.name }} = std::is_convertible_v<T, base_dimension<
      {% for de in dim.definition %}
      unit_exponent<primary_{{ de.dim }}, {{ de.exponent_num }}>{{ ", " if not loop.last }}
      {% endfor %}
   >>;

   /// @brief Retrieves the value of a {{ dim.name }} object with specific units
   {% for de in dim.definition %}
   /// @tparam {{ de.dim }}Unit The {{ de.dim }} unit used for all {{ de.dim }} components of {{ dim.name }}
   {% endfor %}
   /// @tparam DimType The dimension object type, deduced
   /// @param obj The dimension to extract a raw value from
   /// @return The raw value in terms of template units as a PrecisionType
   template<
      {% for de in dim.definition %}
      is_{{ de.dim }}_unit {{ de.dim }}Unit,
      {% endfor %}
      is_{{ dim.name }} DimType>
   // TODO: Unit test this and remove suppression
   [[maybe_unused]]
   constexpr PrecisionType get_{{ dim.name.lower() }}_as(const DimType& obj)
   {
      return get_dimension_as<
         {% for de in dim.definition %}
         unit_exponent<{{ de.dim }}Unit, {{ de.exponent_num }}>{{ "," if not loop.last }}
         {% endfor %}
      >(obj);
   }

   /// @brief Retrieves the value of a named {{ dim.name }} object.
   /// @tparam Named The named unit to extract in terms of
   /// @tparam DimType The dimension object type, deduced
   /// @param obj The dimension to extract a raw value from
   /// @return The raw value in terms of template units as a PrecisionType
   template<IsNamed{{ dim.name }}Unit Named, is_{{ dim.name }} DimType>
   // TODO: Unit test this and remove suppression
   constexpr PrecisionType get_{{ dim.name.lower() }}_as(const DimType& obj)
   {
      return call_unpack<typename Named::units>([&]<typename... Units> { return get_dimension_as<Units...>(obj); });
   }

   template<typename... Ts>
   class {{ dim.name }};




   template<
      {% for num in range(dim_num) %}
      IsBasicUnitType T{{num}},
      {% endfor %}
      is_coefficient... Cs
   >
   requires are_{{ dim.name }}_units<
      {% for num in range(dim_num) %}
      T{{num}}{{ "," if not loop.last }}
      {% endfor %}
   >
   class {{ dim.name }}<{{t_list}}, Cs...> : public base_dimension<double,
      {% for de in dim.definition %}
      unit_exponent<typename Extractor<{{ de.dim }}Type, {{t_list}}>::type, {{ de.exponent_num }}>,
      {% endfor %}
      Cs...
   >
   {
   public:
      using Base = base_dimension<double,
         {% for de in dim.definition %}
         unit_exponent<typename Extractor<{{ de.dim }}Type, {{t_list}}>::type, {{ de.exponent_num }}>,
         {% endfor %}
         Cs...
      >;
   
      using Base::Base;
   
      template<typename T>
      requires is_{{ dim.name }}<T>
      // cppcheck-suppress noExplicitConstructor
      constexpr {{ dim.name }}(const T& base) : Base(base) {}
   };




   template<
      rep_type Rep,
      {% for num in range(dim_num) %}
      IsBasicUnitType T{{num}},
      {% endfor %}
      is_coefficient... Cs
   >
   requires are_{{ dim.name }}_units<
      {% for num in range(dim_num) %}
      T{{num}}{{ "," if not loop.last }}
      {% endfor %}
   >
   class {{ dim.name }}<Rep, {{t_list}}, Cs...> : public base_dimension<Rep,
      {% for de in dim.definition %}
      unit_exponent<typename Extractor<{{ de.dim }}Type, {{t_list}}>::type, {{ de.exponent_num }}>,
      {% endfor %}
      Cs...
   >
   {
   public:
      using Base = base_dimension<Rep,
         {% for de in dim.definition %}
         unit_exponent<typename Extractor<{{ de.dim }}Type, {{t_list}}>::type, {{ de.exponent_num }}>,
         {% endfor %}
         Cs...
      >;
   
      using Base::Base;
   
      template<typename T>
      requires is_{{ dim.name }}<T>
      // cppcheck-suppress noExplicitConstructor
      constexpr {{ dim.name }}(const T& base) : Base(base) {}
   };




   /// @brief Template specialization for named {{ dim.name }} units
   /// @tparam Named The named unit this {{ dim.name }} type is in terms of
   template<IsNamed{{ dim.name }}Unit Named, is_coefficient... Cs>
   class {{ dim.name }}<Named, Cs...> : public base_dimensionFromTuple<double, typename Named::units, std::tuple<Cs...>>::dim
   {
   public:
      using Base = typename base_dimensionFromTuple<double, typename Named::units, std::tuple<Cs...>>::dim;
      using Base::Base;

      template<typename Other>
      requires is_{{ dim.name }}<Other>
      // cppcheck-suppress noExplicitConstructor
      constexpr {{ dim.name }}(const Other& base)
         : Base(call_unpack<typename Named::units>([&]<typename... Units> { return get_dimension_as<Units...>(base); })) {}
   };


   /// @brief Template specialization for named {{ dim.name }} units
   /// @tparam Named The named unit this {{ dim.name }} type is in terms of
   template<rep_type Rep, IsNamed{{ dim.name }}Unit Named, is_coefficient... Cs>
   class {{ dim.name }}<Rep, Named, Cs...> : public base_dimensionFromTuple<Rep, typename Named::units, std::tuple<Cs...>>::dim
   {
   public:
      using Base = typename base_dimensionFromTuple<Rep, typename Named::units, std::tuple<Cs...>>::dim;
      using Base::Base;

      template<typename Other>
      requires is_{{ dim.name }}<Other>
      // cppcheck-suppress noExplicitConstructor
      constexpr {{ dim.name }}(const Other& base)
         : Base(call_unpack<typename Named::units>([&]<typename... Units> { return get_dimension_as<Units...>(base); })) {}
   };




   




   template<
      {% for num in range(dim_num) %}
      IsBasicUnitType T{{num}},
      {% endfor %}
      is_coefficient... Cs
   >
   requires are_{{ dim.name }}_units<
      {% for num in range(dim_num) %}
      T{{num}}{{ "," if not loop.last }}
      {% endfor %}
   >
   // TODO: Unit test this and remove suppression
   [[maybe_unused]]
   constexpr auto make_{{ dim.name }}(Cs... coeffs)
   {
      return {{ dim.name }}<double, {{t_list}}, Cs...>(1.0, coeffs...);
   }

   template<
      {% for num in range(dim_num) %}
      IsBasicUnitType T{{num}},
      {% endfor %}
      rep_type Rep,
      is_coefficient... Cs
   >
   requires are_{{ dim.name }}_units<
      {% for num in range(dim_num) %}
      T{{num}}{{ "," if not loop.last }}
      {% endfor %}
   > && (!is_coefficient<Rep>)
   // TODO: Unit test this and remove suppression
   [[maybe_unused]]
   constexpr auto make_{{ dim.name }}(Rep value, Cs... coeffs)
   {
      return {{ dim.name }}<Rep, {{t_list}}, Cs...>(value, coeffs...);
   }

   /// @brief Template specialization for named {{ dim.name }} units
   /// @tparam Named The named unit this {{ dim.name }} type is in terms of
   template<IsNamed{{ dim.name }}Unit Named, is_coefficient... Cs>
   // TODO: Unit test this and remove suppression
   [[maybe_unused]]
   constexpr auto make_{{ dim.name }}(Cs... coeffs)
   {
      return {{ dim.name }}<double, Named, Cs...>(1.0, coeffs...);
   }

   /// @brief Template specialization for named {{ dim.name }} units
   /// @tparam Named The named unit this {{ dim.name }} type is in terms of
   template<IsNamed{{ dim.name }}Unit Named, rep_type Rep, is_coefficient... Cs>
   // TODO: Unit test this and remove suppression
   [[maybe_unused]]
   constexpr auto make_{{ dim.name }}(Rep value, Cs... coeffs)
   {
      return {{ dim.name }}<Rep, Named, Cs...>(value, coeffs...);
   }

   template<is_{{ dim.name }} Dim>
   {{ dim.name }}(Dim) -> 
   {{ dim.name }}<
      {% for de in dim.definition %}
      DimExtractor<{{ de.dim }}Type, Dim>{{ "," if not loop.last}}
      {% endfor %}
   >;
}

#endif // STATIC_DIMENSION_{{ dim.name.upper() }}_IMPL_H
