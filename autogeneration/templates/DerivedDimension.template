#ifndef STATIC_DIMENSION_{{ dim.name.upper() }}_IMPL_H
#define STATIC_DIMENSION_{{ dim.name.upper() }}_IMPL_H

#include "../../base_dimension.h"
{% for de in dim.definition %}
#include "../../dimensions/fundamental/{{ de.dim }}_dimension.h"
{% endfor %}

namespace dimension
{
   /// @brief Concept to verify a type can serve as a named {{ dim.name }} unit
   template<typename T>
   concept IsNamed{{ dim.name }}Unit = requires {
      typename T::units;
      requires 
         std::tuple_size_v<typename T::units> == {{ dim.definition | length }} &&
         {% for i in range(dim.definition | length) %}
         is_{{dim.definition[i].dim}}_unit<typename std::tuple_element_t<{{ i }}, typename T::units>::unit>{{ " &&" if not loop.last else ";"}}
         {% endfor %}
      requires !std::is_base_of_v<FundamentalUnitTag, T>;
   };

   /// @brief Concept to verify a dimension can be treated as a {{ dim.name }} type
   template<typename T>
   concept Is{{ dim.name }} = std::is_convertible_v<T, base_dimension<
      {% for de in dim.definition %}
      unit_exponent<Primary{{ de.dim }}, {{ de.exponent_num }}>{{ ", " if not loop.last }}
      {% endfor %}
   >>;

   /// @brief Retrieves the value of a {{ dim.name }} object with specific units
   {% for de in dim.definition %}
   /// @tparam {{ de.dim }}Unit The {{ de.dim }} unit used for all {{ de.dim }} components of {{ dim.name }}
   {% endfor %}
   /// @tparam DimType The dimension object type, deduced
   /// @param obj The dimension to extract a raw value from
   /// @return The raw value in terms of template units as a PrecisionType
   template<
      {% for de in dim.definition %}
      is_{{ de.dim }}_unit {{ de.dim }}Unit,
      {% endfor %}
      Is{{ dim.name }} DimType>
   constexpr PrecisionType get_{{ dim.name.lower() }}_as(const DimType& obj)
   {
      return get_dimension_as<
         {% for de in dim.definition %}
         unit_exponent<{{ de.dim }}Unit, {{ de.exponent_num }}>{{ "," if not loop.last }}
         {% endfor %}
      >(obj);
   }

   /// @brief Retrieves the value of a named {{ dim.name }} object.
   /// @tparam Named The named unit to extract in terms of
   /// @tparam DimType The dimension object type, deduced
   /// @param obj The dimension to extract a raw value from
   /// @return The raw value in terms of template units as a PrecisionType
   template<IsNamed{{ dim.name }}Unit Named, Is{{ dim.name }} DimType>
   constexpr PrecisionType get_{{ dim.name.lower() }}_as(const DimType& obj)
   {
      return call_unpack<typename Named::units>([&]<typename... Units> { return get_dimension_as<Units...>(obj); });
   }

   template<typename... Ts>
   class {{ dim.name }};

   /// @brief Represents the default {{ dim.name }}
   template<>
   class {{ dim.name }}<> : public base_dimension<
      {% for de in dim.definition %}
      unit_exponent<Primary{{ de.dim }}, {{ de.exponent_num }}>{{ "," if not loop.last else ">" }}
      {% endfor %}
   {
   public:
      using Base = base_dimension<
         {% for de in dim.definition %}
         unit_exponent<Primary{{ de.dim }}, {{ de.exponent_num }}>{{ "," if not loop.last else ">;" }}
         {% endfor %}
      using Base::Base;

      explicit constexpr {{ dim.name }}(PrecisionType val) : Base(val) {}

      template<typename Other>
      requires Is{{ dim.name }}<Other>
      constexpr {{ dim.name }}(const Other& base)
         : Base(call_unpack<typename Base::units>([&]<typename... Units> { return get_dimension_as<Units...>(base); })) {}
   };

   /// @brief Template specialization for named {{ dim.name }} units
   /// @tparam Named The named unit this {{ dim.name }} type is in terms of
   template<IsNamed{{ dim.name }}Unit Named>
   class {{ dim.name }}<Named> : public base_dimensionFromTuple<typename Named::units>::dim
   {
   public:
      using Base = typename base_dimensionFromTuple<typename Named::units>::dim;
      using Base::Base;

      template<typename Other>
      requires Is{{ dim.name }}<Other>
      constexpr {{ dim.name }}(const Other& base)
         : Base(call_unpack<typename Named::units>([&]<typename... Units> { return get_dimension_as<Units...>(base); })) {}
   };


   template<typename... Units>
   class {{ dim.name }}<Units...> : public base_dimension<
      {% for de in dim.definition %}
      unit_exponent<typename Extractor<{{ de.dim }}Type, Units...>::type, {{ de.exponent_num }}>{{ "," if not loop.last }}
      {% endfor %}
   >
   {
   public:
      using Base = base_dimension<
         {% for de in dim.definition %}
         unit_exponent<typename Extractor<{{ de.dim }}Type, Units...>::type, {{ de.exponent_num }}>{{ "," if not loop.last }}
         {% endfor %}
      >;
   
      using Base::Base;
   
      template<typename T>
      requires Is{{ dim.name }}<T>
      constexpr {{ dim.name }}(const T& base) : Base(base) {}
   };

   template<Is{{ dim.name }} Dim>
   {{ dim.name }}(Dim) -> 
   {{ dim.name }}<
      {% for de in dim.definition %}
      DimExtractor<{{ de.dim }}Type, Dim>{{ "," if not loop.last}}
      {% endfor %}
   >;
}

#endif // STATIC_DIMENSION_{{ dim.name.upper() }}_IMPL_H
