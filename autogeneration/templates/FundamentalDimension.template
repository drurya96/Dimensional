#ifndef STATIC_DIMENSION_{{ dim.name }}_IMPL_H
#define STATIC_DIMENSION_{{ dim.name }}_IMPL_H

#include "../../base_dimension.h"

namespace dimension
{
   /// @brief Represents the {{ dim.name }} type tag.
   struct {{ dim.name }}Type {};

   /// @brief Represents the primary unit for {{ dim.name }}.
   struct {{ dim.base_unit }};

   using Primary{{ dim.name }} = {{ dim.base_unit }};

   /// @brief Concept to check if a type is a valid {{ dim.name }} unit.
   /// @tparam T The type to check.
   template<typename T>
   concept is_{{ dim.name }}_unit = std::is_base_of_v<FundamentalUnitTag, T> && std::is_same_v<typename T::Dim, {{ dim.name }}Type>;

   /// @brief Base class for {{ dim.name }} units.
   /// @tparam Unit The unit type.
   /// @tparam Name The name of the unit.
   /// @tparam Abbreviation The abbreviation of the unit.
   template<typename Unit, StringLiteral Name, StringLiteral Abbreviation, int ID = 0>
   struct {{ dim.name }}Unit : public BaseUnit<Unit, Name, Abbreviation, "{{ dim.name }}", ID>
   {
   public:
      /// @brief The dimension type associated with the unit.
      using Dim = {{ dim.name }}Type;

      /// @brief The primary unit type for this dimension.
      using Primary = Primary{{ dim.name }};
   };

   /// @brief Concept to check if a type is a {{ dim.name }} dimension.
   /// @tparam T The type to check.
   template<typename T>
   concept is_{{ dim.name }} = requires {
      typename decltype(FullSimplify(T{}))::units;
   } &&
   std::tuple_size_v<typename decltype(FullSimplify(T{}))::units> == 1 &&
   is_{{ dim.name }}_unit<typename std::tuple_element_t<0, typename decltype(FullSimplify(T{}))::units>::unit>;

   /// @brief Retrieves the value of a {{ dim.name }} object in the specified unit.
   /// @tparam T The unit type.
   /// @param obj The {{ dim.name }} object.
   /// @return The value in the specified unit.
   template<is_{{ dim.name }}_unit T>
   constexpr PrecisionType get_{{ dim.name.lower() }}_as(/*{{ dim.name }}_type*/ auto obj)
   {
      return get_dimension_as<unit_exponent<T>>(obj);
   }

   template<typename RepOrUnit = double, typename MaybeUnit = void>
   class {{dim.name}};

   /// @brief Represents a dimension type for {{ dim.name }}.
   /// @tparam Unit The primary unit type.
   template<rep_type Rep, is_{{ dim.name }}_unit Unit>
   class {{ dim.name }}<Rep, Unit> : public base_dimension_impl<Rep, unit_exponent<Unit>>
   {
   public:
      /// @brief Default constructor initializing to zero.
      constexpr {{ dim.name }}() : base_dimension_impl<Rep, unit_exponent<Unit>>::base_dimension_impl(0.0) {}

      /// @brief Constructs a {{ dim.name }} object with a specific value.
      /// @param val The value to initialize with.
      explicit constexpr {{ dim.name }}(double val) : base_dimension_impl<Rep, unit_exponent<Unit>>::base_dimension_impl(val) {}

      /// @brief Constructs a {{ dim.name }} object from another base_dimension.
      /// @tparam Ts The units of the base_dimension.
      /// @param base The base_dimension object to construct from.
      template<typename... Ts>
      requires matching_dimensions<base_dimension_impl<Rep, unit_exponent<Unit>>, base_dimension_impl<Rep, Ts...>>
      // Implicit conversion between dimensions of the same unit is core to Dimensional
      // cppcheck-suppress noExplicitConstructor
      constexpr {{ dim.name }}(const base_dimension_impl<Rep, Ts...>& base) : base_dimension_impl<Rep, unit_exponent<Unit>>::base_dimension_impl(get_dimension_as<unit_exponent<Unit>>(base)) {}
   };

   template<is_{{ dim.name }}_unit Unit>
   class {{ dim.name }}<Unit, void> : public {{ dim.name }}<double, Unit> {
   public:
      using {{ dim.name }}<double, Unit>::{{ dim.name }};
   };

   /// @brief Deduction guide for {{ dim.name }} constructor with base_dimension.
   /// @tparam {{ dim.name }}Unit The unit type.
   template<is_{{ dim.name }} Dim>
   {{ dim.name }}(Dim) -> {{ dim.name }}<typename Dim::rep, DimExtractor<{{ dim.name }}Type, Dim>>;
}

#endif // STATIC_DIMENSION_{{ dim.name }}_IMPL_H
